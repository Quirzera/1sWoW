#Область Работа_с_СКД 

Функция ПолучитьШаблонСтруктурыПараметров_Для_ВыполненияОтчетаИзСКД_ИзВнешнейТаблицы(СхемаКомпоновкиОтчета,ТекстЗапроса) ЭКСПОРТ
	СтруктураПараметров = новый Структура;             
	
	СтруктураПараметров.Вставить("СхемаКомпоновкиОтчета",СхемаКомпоновкиОтчета);
	СтруктураПараметров.Вставить("ТекстЗапроса",ТекстЗапроса);
	
	СтруктураПараметров.Вставить("СтруктураПараметровЗапроса",новый Структура);
	СтруктураПараметров.Вставить("СтруктураЗаменяемыхЗначений",новый Структура);
	
	СтруктураПараметров.Вставить("ДокументРезультат",новый ТабличныйДокумент);
	СтруктураПараметров.Вставить("КомпоновщикНастроек",Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции


#КонецОбласти

#Область Сериализация_Десериализация

Функция Сериализовать_в_XML_Строку(ОбъектСериализации) ЭКСПОРТ
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML,ДеревоВОбъектеXDTO);
	СериализованнаяСтрокаXML = МойXML.Закрыть();
	Возврат СериализованнаяСтрокаXML;
КонецФункции

Функция Десериализовать_из_XML_Строки(XML_Строка_СериализованногоОбъекта) ЭКСПОРТ
	ЧтениеXMLДанных = новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XML_Строка_СериализованногоОбъекта);
	ДесериализованноеЗначение = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();
	Возврат ДесериализованноеЗначение;
КонецФункции

Функция Сериализовать_в_JSON_Строку(ОбъектСериализации) ЭКСПОРТ
	ЗаписьJSON = Новый ЗаписьJSON;
	//Или в строку
	ЗаписьJSON.УстановитьСтроку();
	//Или в файл
	//ЗаписьJSON.ОткрытьФайл("D:\testBor.txt");
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектСериализации, НазначениеТипаXML.Явное);
	СериализованнаяСтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СериализованнаяСтрокаJSON;
КонецФункции

Функция Десериализовать_из_JSON_Строки(JSON_Строка_СериализованногоОбъекта) ЭКСПОРТ
	ЧтениеJSON = Новый ЧтениеJSON;
	//Или из строки
	ЧтениеJSON.УстановитьСтроку(JSON_Строка_СериализованногоОбъекта);
	//Или из файла	
	//ЧтениеJSON.ОткрытьФайл("D:\testBor.txt");		
	ДесериализованноеЗначение = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат ДесериализованноеЗначение;
КонецФункции

#КонецОбласти

#Область HTML

Функция ПолучитьТекстHTML_ФайлаКартинки(ПутьКФайлуКартинки) ЭКСПОРТ
	
	докHTML = новый ДокументHTML("");
	//<html>
	
	Раздел_html = докHTML.ДочерниеУзлы.Элемент(1);
	
		//<head>
		Раздел_head = докHTML.СоздатьЭлемент("head");
		
		Тег_meta = докHTML.СоздатьЭлемент("meta");
		Тег_meta.УстановитьАтрибут("http-equiv", "'X-UA-Compatible' content='IE'=edge");
		Раздел_head.ДобавитьДочерний(Тег_meta);		
		//</head>		
	Раздел_html.ДобавитьДочерний(Раздел_head);
	
		//<body>
		Раздел_body = докHTML.СоздатьЭлемент("body");
		Раздел_body.УстановитьАтрибут("style", "'width: 100%; height: 100%;'");
		
		Тег_img = докHTML.СоздатьЭлемент("img");
		Тег_img.УстановитьАтрибут("src", "file:" + ПутьКФайлуКартинки);
		Раздел_body.ДобавитьДочерний(Тег_img);
		//</body>
	Раздел_html.ДобавитьДочерний(Раздел_body);
	//</html>
	
	ТекстHTML = ПолучитьТекстHTMLИзОбъектаДокументHTML(докHTML);	
	
	Возврат ТекстHTML;
КонецФункции

Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) ЭКСПОРТ
	
	Попытка
		ЗаписьDom = новый ЗаписьDOM();
		ЗаписьHTML = новый ЗаписьHTML();
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDom.Записать(ДокументHTML, ЗаписьHTML);
		Возврат ЗаписьHTML.Закрыть();
	Исключение
		СообщениеОшибки = ОписаниеОшибки();
		Сообщить(СообщениеОшибки);
		Возврат Неопределено;
	КонецПопытки		
	
КонецФункции	

#КонецОбласти

Функция УстановитьБулевуПометкуПоДеревуФормы(ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ  
	ЗначениеМетки = ФиксированныеПараметры.ЗначениеМетки;
	ИмяПоля = ФиксированныеПараметры.ИмяПоля; 
	
	ТекущаяВеткаДерева = ?(МодифицируемыеПараметры.Свойство("ТекущаяВеткаДерева",ТекущаяВеткаДерева),ТекущаяВеткаДерева,Неопределено);
	ДеревоФормы = ?(МодифицируемыеПараметры.Свойство("ДеревоФормы",ДеревоФормы),ДеревоФормы,Неопределено);
	
	Если НЕ (ЗначениеЗаполнено(ИмяПоля) И ЗначениеЗаполнено(ЗначениеМетки)) Тогда
		СообщениеОшибки = "Не корректный вызов. Не указано имя поля/Значение метки.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
	Если ТекущаяВеткаДерева = Неопределено И ДеревоФормы = Неопределено Тогда
		СообщениеОшибки = "Не корректный вызов.Не передано дерево формы/начальная ветка дерева.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущаяВеткаДерева = Неопределено Тогда
		ТекущаяВеткаДерева = ДеревоФормы;
	КонецЕсли;	
	
	ЭлементыТекущейВетки = ТекущаяВеткаДерева.ПолучитьЭлементы();
	Для каждого ЭлементТекущейВетки из ЭлементыТекущейВетки Цикл
		ЭлементТекущейВетки[ИмяПоля] = ЗначениеМетки;
		
		НеИзменяемыеПараметры = новый Структура;
		НеИзменяемыеПараметры.Вставить("ЗначениеМетки",ЗначениеМетки);
		НеИзменяемыеПараметры.Вставить("ИмяПоля",ИмяПоля);
		НеИзменяемыеПараметры = новый ФиксированнаяСтруктура(НеИзменяемыеПараметры);
		
		ИзменяемыеПараметры = новый Структура;
		ИзменяемыеПараметры.Вставить("ТекущаяВеткаДерева",ЭлементТекущейВетки);
		
		УстановитьБулевуПометкуПоДеревуФормы(НеИзменяемыеПараметры,ИзменяемыеПараметры);		
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции

Функция ПройденаПроверкаФормата_XML_Файла(ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ
	ИмяФайлаXML = ФиксированныеПараметры.ИмяФайлаXML; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
	
	//// проверка формата файла обмена
	//Если Не ЧтениеXML.Прочитать()
	//	Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
	//	Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
	//	Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
	//	
	//	СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Если Не ЧтениеXML.Прочитать()
	//	Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
	//	Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
	//	
	//	СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
	//	Возврат;
	//	
	//КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ЭтоРасширениеТекстовогоФайла(Расширение) ЭКСПОРТ
	Если СтрЗаканчиваетсяНа(Расширение,"xml") Тогда
		Возврат Истина;
	КонецЕсли;	
КонецФункции 

Функция ДанныеЗаписаныВФайл(ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ
	ЗаписываемыеДанные = ФиксированныеПараметры.ЗаписываемыеДанные;
	РасширениеФайлаДанных = ФиксированныеПараметры.РасширениеФайлаДанных;	
	ПолноеИмяСохраняемогоФайла = ФиксированныеПараметры.ПолноеИмяСохраняемогоФайла;
	
	ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайлаДанных);	
	
	Если ЭтоРасширениеТекстовогоФайла(РасширениеФайлаДанных) Тогда
		Кодировка = КодировкаТекста.UTF8;
		ТекстовыйФайлЗапись = Новый ЗаписьТекста(ВремФайл,Кодировка);
		ТекстовыйФайлЗапись.Записать(ЗаписываемыеДанные);
		ТекстовыйФайлЗапись.Закрыть();
		ДвоичныеДанныеФайла = новый ДвоичныеДанные(ВремФайл);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяСохраняемогоФайла);
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

#Область ВыгрузкаЗагрузкаXML8_3

Функция ПолучитьЧтениеXML(ФиксированныеПараметры, МодифицируемыеПараметры = Неопределено) ЭКСПОРТ
		
	Если ТипЗнч(МодифицируемыеПараметры) <> Тип("Структура") Тогда
		МодифицируемыеПараметры = новый Структура;
	КонецЕсли;
	
	ТипЧтения = ?(ФиксированныеПараметры.Свойство("ТипЧтения"),ТипЧтения,Неопределено);
	
	ИмяФайлаXML = ?(ФиксированныеПараметры.Свойство("ИмяФайлаXML",ИмяФайлаXML),ИмяФайлаXML,Неопределено);
	СтрокаДанныхXML = ?(ФиксированныеПараметры.Свойство("СтрокаДанныхXML",СтрокаДанныхXML),СтрокаДанныхXML,Неопределено);
	
	Если ТипЧтения = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаДанныхXML) Тогда
			СообщениеОшибки  = "Пустая строка данных xml";
			МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
			Возврат Неопределено;
		КонецЕсли;	
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаДанныхXML);
		Возврат ЧтениеXML;
		
	ИначеЕсли ТипЧтения = "ИзФайла" Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяФайлаXML) Тогда
			СообщениеОшибки  = "Пустое имя xml файла";
			МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
			Возврат Неопределено;
		КонецЕсли;	
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
		Возврат ЧтениеXML;
				
	КонецЕсли;
			
	СообщениеОшибки  = "Не разработанный тип чтения XML.";
	МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);			
	
	Возврат Неопределено;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".") ЭКСПОРТ
	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		Поз = Найти(Стр, Разделитель);
		Если Поз = 0 Тогда
			Если (СокрЛП(Стр) <> "") Тогда
				МассивСтрок.Добавить(Стр);
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Стр,Поз - 1));
		Стр = Сред(Стр, Поз + ДлинаРазделителя);
	КонецЦикла;
	
КонецФункции 

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
//@skip-check method-too-many-params
//@skip-check method-too-many-params
//@skip-check method-too-many-params
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
	
КонецФункции 

#КонецОбласти	

#Область ВнешниеСоединения

Функция ПолучитьADODB_СоединениеС_БД(Знач ФиксированныеПараметры, МодифицируемыеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(МодифицируемыеПараметры) <> Тип("Структура") Тогда
		МодифицируемыеПараметры = новый Структура;
	КонецЕсли;
	
	ConnectionTimeout = ?(ФиксированныеПараметры.Свойство("ConnectionTimeout",ConnectionTimeout),ConnectionTimeout,10);
	CommandTimeOut = ?(ФиксированныеПараметры.Свойство("CommandTimeOut",CommandTimeOut),CommandTimeOut,0);
		
	SQL_Server = ФиксированныеПараметры.SQL_Server;
	Database = ФиксированныеПараметры.Database;
	user_login = ФиксированныеПараметры.user_login;
	user_pwd = ФиксированныеПараметры.user_pwd;
	
	Provider = ?(ФиксированныеПараметры.Свойство("Provider",Provider),Provider,"SQLOLEDB");
	
	ConnectionString = "Provider=" + Provider + ";server=" + SQL_Server 
						+ ";database="+ Database + ";uid=" + user_login + ";pwd=" + user_pwd;	
	 
	Connect = новый COMОбъект("ADODB.Connection");
	Connect.ConnectionTimeout = ConnectionTimeout;
	Connect.ConnectionString = ConnectionString;
	
	Connect.open();
	
	Connect.CommandTimeOut = CommandTimeOut;
	
	Возврат Connect;
КонецФункции	

#КонецОбласти

Функция ПолучитьSQL_UID_ИзУникальногоИдентификатора(УникальныйИдентификатор) ЭКСПОРТ
	стрUID = Строка(УникальныйИдентификатор);
	ЧастьПервая = Сред(стрUID,20,4);
	ЧастьВторая = Сред(стрUID,25,12);
	ЧастьТретья = Сред(стрUID,15,4);
	ЧастьЧетвертая = Сред(стрUID,10,4);
	ЧастьПятая = Сред(стрUID,1,8);
	SQL_UID = "0x" + ЧастьПервая + ЧастьВторая + ЧастьТретья + ЧастьЧетвертая + ЧастьПятая;
	Возврат SQL_UID;
КонецФункции	

Функция ПолучитьУникальныйИдентификаторИз_UID_SQL(SQL_UID) ЭКСПОРТ
	ЧастьПервая = Сред(SQL_UID,27,8);
	ЧастьВторая = Сред(SQL_UID,23,4);
	ЧастьТретья = Сред(SQL_UID,19,4);
	ЧастьЧетвертая = Сред(SQL_UID,3,4);
	ЧастьПятая = Сред(SQL_UID,7,12);
	
	УиД_1С = ЧастьПервая + "-" + ЧастьВторая + "-" + ЧастьТретья + "-" + ЧастьЧетвертая + "-" + ЧастьПятая;
	
	Попытка
		УникальныйИдентификатор = новый УникальныйИдентификатор(УиД_1С);
		Возврат УникальныйИдентификатор; 
	Исключение
		Возврат Неопределено;
	КонецПопытки;		
КонецФункции	
///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Обработчики Событий Формы \\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область СобытияФормы

#КонецОбласти


///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Обработчики Событий Команд\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область КомандыФормы

#КонецОбласти

///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Обработчики Событий Элементов\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область ЭлементыФормы

#КонецОбласти

///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////Служебные методы\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область Служебные

#КонецОбласти

/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////Для удаления\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#Область ДляУдаления

#КонецОбласти

////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////////////
////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Для удаления/////////////////////////////
////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////////////